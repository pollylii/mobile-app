{"remainingRequest":"C:\\polly\\polly\\linjiashop\\linjiashop-mobile\\node_modules\\babel-loader\\lib\\index.js!C:\\polly\\polly\\linjiashop\\linjiashop-mobile\\src\\utils\\request.js","dependencies":[{"path":"C:\\polly\\polly\\linjiashop\\linjiashop-mobile\\src\\utils\\request.js","mtime":1588337555488},{"path":"C:\\polly\\polly\\linjiashop\\linjiashop-mobile\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\polly\\polly\\linjiashop\\linjiashop-mobile\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"C:/polly/polly/linjiashop/linjiashop-mobile/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"vant/es/toast/style\");\n\nvar _toast = _interopRequireDefault(require(\"vant/es/toast\"));\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _router = require(\"@/router\");\n\nvar _store = _interopRequireDefault(require(\"@/store\"));\n\nvar _storage = _interopRequireDefault(require(\"@/utils/storage\"));\n\n// create an axios instance\nvar service = _axios.default.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: false,\n  // send cookies when cross-domain requests\n  timeout: 15000 // request timeout\n\n}); // request interceptor\n\n\nservice.interceptors.request.use(function (config) {\n  if (_storage.default.getToken()) {\n    // 让每个请求携带自定义token 请根据实际情况自行修改\n    config.headers['Authorization'] = _storage.default.getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  return Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\r\n * If you want to get http information such as headers or status\r\n * Please return  response => response\r\n*/\n\n/**\r\n * Determine the request status by custom code\r\n * Here is just an example\r\n * You can also judge the status by HTTP Status Code\r\n */\nfunction (response) {\n  console.log('response', response);\n\n  if (response.headers.token) {\n    //如果后台通过header返回token，说明token已经更新，则更新客户端本地token\n    _store.default.dispatch('app/toggleToken', response.headers.token);\n  }\n\n  var res = response.data;\n\n  if (res.code !== 20000) {\n    return Promise.reject(res.msg || 'error');\n  } else {\n    return res;\n  }\n}, function (error) {\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        //如果后台返回401，则清空本地用户信息信息并跳转至登录页\n        _store.default.dispatch('app/toggleUser', {});\n\n        _store.default.dispatch('app/toggleToken', '');\n\n        _router.router.replace({\n          path: '/login',\n          query: {\n            redirect: _router.router.currentRoute.path\n          }\n        });\n\n        return Promise.reject(error.response.data.message);\n        break;\n\n      case 500:\n        if (error.response.data.message && error.response.data.message.indexOf('relogin') > -1) {\n          console.log('need relogin');\n\n          _store.default.dispatch('app/toggleUser', {});\n\n          _store.default.dispatch('app/toggleToken', '');\n\n          _router.router.replace({\n            path: '/login',\n            query: {\n              redirect: _router.router.currentRoute.path\n            }\n          });\n\n          return Promise.reject(error.response.data.message);\n        } else {\n          _toast.default.fail(error.response.data.message);\n\n          return Promise.reject(error.response.data.message);\n        }\n\n        break;\n\n      default:\n        return Promise.reject(error.response.data.message);\n    }\n  }\n});\nvar _default = service;\nexports.default = _default;",null]}